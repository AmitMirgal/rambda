function add(x,y){if(y===void 0){return c=>add(x,c);}return x+y;}function curry(f,a=[]){return(...p)=>(o=>o.length>=f.length?f(...o):curry(f,o))([...a,...p]);}function adjustRaw(d,e,g){const h=g.concat();return h.map((j,k)=>{if(k===e){return d(g[e]);}return j;});}const l=curry(adjustRaw);function filterObject(m,n){const q={};for(const r in n){if(m(n[r],r)){q[r]=n[r];}}return q;}function filter(s,t){if(arguments.length===1){return u=>filter(s,u);}if(t===void 0){return[];}if(!Array.isArray(t)){return filterObject(s,t);}let v=-1,w=0;const z=t.length,A=[];while(++v<z){const B=t[v];if(s(B,v)){A[w++]=B;}}return A;}function all(C,D){if(arguments.length===1){return E=>all(C,E);}return filter(C,D).length===D.length;}function any(G,H){if(arguments.length===1){return I=>any(G,I);}let J=0;while(J<H.length){if(G(H[J],J)){return!0;}J++;}return!1;}function allPass(K,x){if(arguments.length===1){return L=>allPass(K,L);}return!any(M=>!M(x),K);}function always(x){return()=>x;}function anyPass(N,x){if(arguments.length===1){return O=>anyPass(N,O);}return any(P=>P(x))(N);}function append(x,Q){if(arguments.length===1){return R=>append(x,R);}if(typeof Q==='string')return`${Q}${x}`;const S=Q.concat();S.push(x);return S;}function assocRaw(U,V,W){return Object.assign({},W,{[U]:V});}const X=curry(assocRaw);function both(x,y){if(arguments.length===1){return Y=>both(x,Y);}return Z=>x(Z)&&y(Z);}function complement(fn){return b1=>!fn(b1);}function compose(...fns){return(...args)=>{const c1=fns.slice();if(c1.length>0){const fn=c1.pop();let e1=fn(...args);while(c1.length>0){e1=c1.pop()(e1);}return e1;}return void 0;};}function concat(x,y){if(arguments.length===1){return f1=>concat(x,f1);}return typeof x==='string'?`${x}${y}`:[...x,...y];}function type(a){const g1=typeof a;if(a===null){return'Null';}else if(a===void 0){return'Undefined';}else if(g1==='boolean'){return'Boolean';}else if(g1==='number'){return'Number';}else if(g1==='string'){return'String';}else if(Array.isArray(a)){return'Array';}else if(a instanceof RegExp){return'RegExp';}const h1=a.toString();if(h1.startsWith('async')){return'Async';}else if(h1==='[object Promise]'){return'Promise';}else if(h1.includes('function')||h1.includes('=>')){return'Function';}return'Object';}function equals(a,b){if(arguments.length===1){return i1=>equals(a,i1);}if(a===b){return!0;}const j1=type(a);if(j1!==type(b)){return!1;}if(j1==='Array'){const k1=Array.from(a),l1=Array.from(b);if(k1.toString()!==l1.toString()){return!1;}let m1=!0;k1.forEach((n1,o1)=>{if(m1){if(n1!==l1[o1]&&!equals(n1,l1[o1])){m1=!1;}}});return m1;}if(j1==='Object'){const p1=Object.keys(a);if(p1.length!==Object.keys(b).length){return!1;}let q1=!0;p1.forEach(r1=>{if(q1){const s1=a[r1],t1=b[r1];if(s1!==t1&&!equals(s1,t1)){q1=!1;}}});return q1;}return!1;}function contains(x,u1){if(arguments.length===1){return v1=>contains(x,v1);}let w1=-1,x1=!1;while(++w1<u1.length&&!x1){if(equals(u1[w1],x)){x1=!0;}}return x1;}const dec=x=>x-1;function defaultTo(y1,z1){if(arguments.length===1){return A1=>defaultTo(y1,A1);}return z1===void 0||z1===null||Number.isNaN(z1)===!0?y1:z1;}function dissoc(B1,C1){if(arguments.length===1){return D1=>dissoc(B1,D1);}if(C1===null||C1===void 0){return{};}const E1={};for(const p in C1){E1[p]=C1[p];}delete E1[B1];return E1;}function divide(x,y){if(arguments.length===1){return F1=>divide(x,F1);}return x/y;}function drop(G1,x){if(arguments.length===1){return H1=>drop(G1,H1);}return x.slice(G1);}function dropLast(I1,x){if(arguments.length===1){return J1=>dropLast(I1,J1);}return x.slice(0,-I1);}function either(x,y){if(arguments.length===1){return K1=>either(x,K1);}return L1=>x(L1)||y(L1);}function endsWith(M1,N1){if(arguments.length===1){return O1=>endsWith(M1,O1);}return N1.endsWith(M1);}function F(){return!1;}function find(fn,Q1){if(arguments.length===1){return R1=>find(fn,R1);}return Q1.find(fn);}function findIndex(fn,T1){if(arguments.length===1){return U1=>findIndex(fn,U1);}const V1=T1.length;let W1=-1;while(++W1<V1){if(fn(T1[W1],W1)){return W1;}}return-1;}function flatten(X1,Y1){Y1=Y1===void 0?[]:Y1;for(let i=0;i<X1.length;i++){if(Array.isArray(X1[i])){flatten(X1[i],Y1);}else{Y1.push(X1[i]);}}return Y1;}function flipExport(fn){return(...input)=>{if(input.length===1){return a2=>fn(a2,input[0]);}else if(input.length===2){return fn(input[1],input[0]);}return void 0;};}function flip(fn){return flipExport(fn);}function mapObject(fn,d2){const e2={};for(const f2 in d2){e2[f2]=fn(d2[f2],f2);}return e2;}function map(fn,h2){if(arguments.length===1){return i2=>map(fn,i2);}if(h2===void 0){return[];}if(!Array.isArray(h2)){return mapObject(fn,h2);}let j2=-1;const k2=h2.length,l2=Array(k2);while(++j2<k2){l2[j2]=fn(h2[j2],j2);}return l2;}function forEach(fn,n2){if(arguments.length===1){return o2=>forEach(fn,o2);}map(fn,n2);return n2;}function groupBy(fn,q2){if(arguments.length===1){return r2=>groupBy(fn,r2);}const s2={};for(let i=0;i<q2.length;i++){const t2=q2[i],u2=fn(t2);if(!s2[u2]){s2[u2]=[];}s2[u2].push(t2);}return s2;}function has(v2,w2){if(arguments.length===1){return x2=>has(v2,x2);}return w2[v2]!==void 0;}function head(a){if(typeof a==='string'){return a[0]||'';}return a[0];}function identity(x){return x;}function ifElse(y2,z2,A2){if(z2===void 0){return(B2,C2)=>ifElse(y2,B2,C2);}else if(A2===void 0){return D2=>ifElse(y2,z2,D2);}return E2=>{const F2=typeof y2==='boolean'?y2:y2(E2);if(F2===!0){return z2(E2);}return A2(E2);};}const inc=x=>x+1;function includes(G2,H2){if(arguments.length===1){return I2=>includes(G2,I2);}const ok=Array.isArray(H2)||typeof H2==='string';if(!ok)return!1;return H2.includes(G2);}function indexBy(fn,L2){if(arguments.length===1){return M2=>indexBy(fn,M2);}const N2={};for(let i=0;i<L2.length;i++){const O2=L2[i];N2[fn(O2)]=O2;}return N2;}function indexOf(x,P2){if(arguments.length===1){return Q2=>indexOf(x,Q2);}let R2=-1;const S2=P2.length;while(++R2<S2){if(P2[R2]===x){return R2;}}return-1;}function baseSlice(T2,U2,V2){let W2=-1,X2=T2.length;V2=V2>X2?X2:V2;if(V2<0){V2+=X2;}X2=U2>V2?0:V2-U2>>>0;U2>>>=0;const Y2=Array(X2);while(++W2<X2){Y2[W2]=T2[W2+U2];}return Y2;}function init(a){if(typeof a==='string'){return a.slice(0,-1);}return a.length?baseSlice(a,0,-1):[];}function is(Z2,x){if(arguments.length===1){return a3=>is(Z2,a3);}return x!=null&&x.constructor===Z2||x instanceof Z2;}function isNil(x){return x===void 0||x===null;}function join(b3,c3){if(arguments.length===1){return d3=>join(b3,d3);}return c3.join(b3);}function keys(x){return Object.keys(x);}function last(a){if(typeof a==='string'){return a[a.length-1]||'';}return a[a.length-1];}function lastIndexOf(x,e3){if(arguments.length===1){return f3=>lastIndexOf(x,f3);}let g3=-1;e3.map((h3,i3)=>{if(equals(h3,x)){g3=i3;}});return g3;}function length(x){return x.length;}function match(j3,x){if(arguments.length===1){return k3=>match(j3,k3);}const l3=x.match(j3);return l3===null?[]:l3;}function merge(m3,n3){if(arguments.length===1){return o3=>merge(m3,o3);}return Object.assign({},m3||{},n3||{});}function max(x,y){if(arguments.length===1){return p3=>max(x,p3);}return y>x?y:x;}function maxBy(fn,x,y){if(arguments.length===2){return r3=>maxBy(fn,x,r3);}else if(arguments.length===1){return(s3,t3)=>maxBy(fn,s3,t3);}return fn(y)>fn(x)?y:x;}function min(x,y){if(arguments.length===1){return u3=>min(x,u3);}return y<x?y:x;}function minBy(fn,x,y){if(arguments.length===2){return w3=>minBy(fn,x,w3);}else if(arguments.length===1){return(x3,y3)=>minBy(fn,x3,y3);}return fn(y)<fn(x)?y:x;}function modulo(x,y){if(arguments.length===1)return z3=>modulo(x,z3);return x%y;}function multiply(x,y){if(arguments.length===1)return A3=>multiply(x,A3);return x*y;}function none(fn,C3){if(arguments.length===1)return D3=>none(fn,D3);return C3.filter(fn).length===0;}function not(x){return!x;}function nth(E3,F3){if(arguments.length===1)return G3=>nth(E3,G3);const H3=E3<0?F3.length+E3:E3;return Object.prototype.toString.call(F3)==='[object String]'?F3.charAt(H3):F3[H3];}function omit(I3,J3){if(arguments.length===1){return K3=>omit(I3,K3);}if(J3===null||J3===void 0){return void 0;}const L3=typeof I3==='string'?I3.split(','):I3,M3={};for(const N3 in J3){if(!L3.includes(N3)){M3[N3]=J3[N3];}}return M3;}function partialCurry(fn,P3={}){return Q3=>{if(type(fn)==='Async'||type(fn)==='Promise'){return new Promise((R3,S3)=>{fn(merge(Q3,P3)).then(R3).catch(S3);});}return fn(merge(Q3,P3));};}function path(T3,U3){if(arguments.length===1){return V3=>path(T3,V3);}if(U3===null||U3===void 0){return void 0;}let W3=U3,X3=0;const Y3=typeof T3==='string'?T3.split('.'):T3;while(X3<Y3.length){if(W3===null||W3===void 0){return void 0;}W3=W3[Y3[X3]];X3++;}return W3;}function pathOrRaw(Z3,a4,b4){return defaultTo(Z3,path(a4,b4));}const c4=curry(pathOrRaw);function pick(d4,e4){if(arguments.length===1){return f4=>pick(d4,f4);}if(e4===null||e4===void 0){return void 0;}const g4=typeof d4==='string'?d4.split(','):d4,h4={};let i4=0;while(i4<g4.length){if(g4[i4]in e4){h4[g4[i4]]=e4[g4[i4]];}i4++;}return h4;}function pickAll(j4,k4){if(arguments.length===1){return l4=>pickAll(j4,l4);}if(k4===null||k4===void 0){return void 0;}const m4=typeof j4==='string'?j4.split(','):j4,n4={};let o4=0;while(o4<m4.length){if(m4[o4]in k4){n4[m4[o4]]=k4[m4[o4]];}else{n4[m4[o4]]=void 0;}o4++;}return n4;}function pipe(...fns){return compose(...fns.reverse());}function pluck(p4,q4){if(arguments.length===1)return r4=>pluck(p4,r4);const s4=[];map(t4=>{if(!(t4[p4]===void 0)){s4.push(t4[p4]);}},q4);return s4;}function prepend(x,u4){if(arguments.length===1)return v4=>prepend(x,v4);if(typeof u4==='string'){return`${x}${u4}`;}const w4=u4.concat();w4.unshift(x);return w4;}function prop(x4,y4){if(arguments.length===1)return z4=>prop(x4,z4);return y4[x4];}function propEq(A4,x,B4){if(x===void 0){return(C4,D4)=>propEq(A4,C4,D4);}else if(B4===void 0){return E4=>propEq(A4,x,E4);}return B4[A4]===x;}function range(F4,G4){if(arguments.length===1)return H4=>range(F4,H4);const I4=[];for(let i=F4;i<G4;i++){I4.push(i);}return I4;}function reduce(fn,K4,L4){if(K4===void 0){return(M4,N4)=>reduce(fn,M4,N4);}else if(L4===void 0){return O4=>reduce(fn,K4,O4);}return L4.reduce(fn,K4);}function reject(fn,Q4){if(arguments.length===1)return R4=>reject(fn,R4);return filter((x,i)=>!fn(x,i),Q4);}function repeat(x,S4){if(arguments.length===1){return T4=>repeat(x,T4);}const U4=Array(S4);return U4.fill(x);}function replace(V4,W4,X4){if(W4===void 0){return(Y4,Z4)=>replace(V4,Y4,Z4);}else if(X4===void 0){return a5=>replace(V4,W4,a5);}return X4.replace(V4,W4);}function reverse(b5){const c5=b5.concat();return c5.reverse();}function sort(fn,e5){if(arguments.length===1)return f5=>sort(fn,f5);const g5=e5.concat();return g5.sort(fn);}function sortBy(fn,i5){if(arguments.length===1){return j5=>sortBy(fn,j5);}const k5=i5.concat();return k5.sort((a,b)=>{const l5=fn(a),m5=fn(b);return l5<m5?-1:l5>m5?1:0;});}function split(n5,o5){if(arguments.length===1)return p5=>split(n5,p5);return o5.split(n5);}function splitEvery(q5,x){if(arguments.length===1)return r5=>splitEvery(q5,r5);const s5=q5>1?q5:1,t5=[];let u5=0;while(u5<x.length){t5.push(x.slice(u5,u5+=s5));}return t5;}function startsWith(x,y){if(arguments.length===1)return v5=>startsWith(x,v5);return y.startsWith(x);}function subtract(x,y){if(arguments.length===1)return w5=>subtract(x,w5);return x-y;}function T(){return!0;}function tail(x5){return drop(1,x5);}function take(y5,x){if(arguments.length===1)return z5=>take(y5,z5);if(typeof x==='string'){return x.slice(0,y5);}return baseSlice(x,0,y5);}function takeLast(A5,x){if(arguments.length===1)return B5=>takeLast(A5,B5);const C5=x.length;let D5=A5>C5?C5:A5;if(typeof x==='string'){return x.slice(C5-D5);}D5=C5-D5;return baseSlice(x,D5,C5);}function tap(fn,x){if(arguments.length===1)return F5=>tap(fn,F5);fn(x);return x;}function test(G5,H5){if(arguments.length===1)return I5=>test(G5,I5);return H5.search(G5)!==-1;}function times(fn,K5){if(arguments.length===1)return L5=>times(fn,L5);return map(fn,range(0,K5));}function toLower(x){return x.toLowerCase();}function toString(x){return x.toString();}function toUpper(x){return x.toUpperCase();}function trim(M5){return M5.trim();}function uniq(N5){let O5=-1;const P5=[];while(++O5<N5.length){const Q5=N5[O5];if(!contains(Q5,P5)){P5.push(Q5);}}return P5;}function uniqWith(fn,S5){if(arguments.length===1)return T5=>uniqWith(fn,T5);let U5=-1;const V5=S5.length,W5=[];while(++U5<V5){const X5=S5[U5],Y5=any(Z5=>fn(X5,Z5),W5);if(!Y5){W5.push(X5);}}return W5;}function update(a6,b6,c6){if(b6===void 0){return(d6,e6)=>update(a6,d6,e6);}else if(c6===void 0){return f6=>update(a6,b6,f6);}const g6=c6.concat();return g6.fill(b6,a6,a6+1);}function values(h6){const i6=[];for(const j6 in h6){i6.push(h6[j6]);}return i6;}function without(k6,l6){return reduce((m6,n6)=>!contains(n6,k6)?m6.concat(n6):m6,[],l6);}function zipObj(x,y){if(arguments.length===1)return o6=>zipObj(x,o6);return x.reduce((p6,q6,i)=>{p6[q6]=y[i];return p6;},{});}export{add,l as adjust,all,allPass,always,any,anyPass,append,X as assoc,both,complement,compose,concat,contains,curry,dec,defaultTo,dissoc,divide,drop,dropLast,either,endsWith,equals,F,filter,find,findIndex,flatten,flip,forEach,groupBy,has,head,identity,ifElse,inc,includes,indexBy,indexOf,init,is,isNil,join,keys,last,lastIndexOf,length,map,match,merge,max,maxBy,min,minBy,modulo,multiply,none,not,nth,omit,partialCurry,path,c4 as pathOr,pick,pickAll,pipe,pluck,prepend,prop,propEq,range,reduce,reject,repeat,replace,reverse,sort,sortBy,split,splitEvery,startsWith,subtract,T,tail,take,takeLast,tap,test,times,toLower,toString,toUpper,trim,type,uniq,uniqWith,update,values,without,zipObj};