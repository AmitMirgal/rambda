function add(a,b){if(b===void 0){return c=>add(a,c);}return a+b;}function adjust(d,e,f){if(e===void 0){return(g,h)=>adjust(d,g,h);}else if(f===void 0){return j=>adjust(d,e,j);}return f.map((k,l)=>{if(l===e){return d(f[e]);}return k;});}function any(m,n){if(n===void 0){return o=>any(m,o);}let p=0;while(p<n.length){if(m(n[p])){return!0;}p++;}return!1;}function append(q,r){if(r===void 0){return s=>append(q,s);}const t=r;t.push(q);return t;}function isFunction(u){return typeof u==="function";}function compose(){const v=arguments;let w=v.length;while(w--){if(!isFunction(v[w])){throw new TypeError();}}return function(){let x=arguments,y=v.length;while(y--){x=[v[y].apply(this,x)];}return x[0];};}function contains(z,A){if(A===void 0){return B=>contains(z,B);}let C=-1,D=!1;while(++C<A.length&&!D){if(equals(A[C],z)){D=!0;}}return D;}function filter(E,F){if(F===void 0){return G=>filter(E,G);}let H=-1,I=0;const J=F.length,K=[];while(++H<J){const L=F[H];if(E(L)){K[I++]=L;}}return K;}function find(M,N){if(N===void 0){return O=>find(M,O);}return N.find(M);}function findIndex(P,Q){if(Q===void 0){return R=>findIndex(P,R);}const S=Q.length;let T=-1;while(++T<S){if(P(Q[T])){return T;}}return-1;}function flatten(U,V){V=V===void 0?[]:V;for(let i=0;i<U.length;i++){if(Array.isArray(U[i])){flatten(U[i],V);}else{V.push(U[i]);}}return V;}function drop(W,a){if(a===void 0){return X=>drop(W,X);}return a.slice(W);}function dropLast(Y,a){if(a===void 0){return Z=>dropLast(Y,Z);}return a.slice(0,-Y);}function equals(a,b){if(b===void 0){return a1=>equals(a,a1);}else if(a===b){return a!==0||1/a===1/b;}const b1=type(a);if(b1!==type(b)){return!1;}if(b1==="Array"){const c1=a,d1=b;return c1.sort().toString()===d1.sort().toString();}if(b1==="Object"){const e1=Object.keys(a);if(e1.length===Object.keys(b).length){if(e1.length===0){return!0;}let f1=!0;e1.map(g1=>{if(f1){const h1=type(a[g1]),i1=type(b[g1]);if(h1===i1){if(h1==="Object"){if(Object.keys(a[g1]).length===Object.keys(b[g1]).length){if(Object.keys(a[g1]).length!==0){if(!equals(a[g1],b[g1])){f1=!1;}}}else{f1=!1;}}else if(!equals(a[g1],b[g1])){f1=!1;}}else{f1=!1;}}});return f1;}}return!1;}function head(a){if(typeof a==="string"){return a[0]||"";}return a[0];}function indexOf(j1,k1){if(k1===void 0){return l1=>indexOf(j1,l1);}let m1=-1;const n1=k1.length;while(++m1<n1){if(k1[m1]===j1){return m1;}}return-1;}function baseSlice(o1,p1,q1){let r1=-1,s1=o1.length;q1=q1>s1?s1:q1;if(q1<0){q1+=s1;}s1=p1>q1?0:q1-p1>>>0;p1>>>=0;const t1=Array(s1);while(++r1<s1){t1[r1]=o1[r1+p1];}return t1;}function init(a){if(typeof a==="string"){return a.slice(0,-1);}return a.length?baseSlice(a,0,-1):[];}function join(u1,v1){if(v1===void 0){return w1=>join(u1,w1);}return v1.join(u1);}function map(fn,y1){if(y1===void 0){return z1=>map(fn,z1);}let A1=-1;const B1=y1.length,C1=Array(B1);while(++A1<B1){C1[A1]=fn(y1[A1]);}return C1;}function last(a){if(typeof a==="string"){return a[a.length-1]||"";}return a[a.length-1];}function length(D1){return D1.length;}function match(E1,F1){if(F1===void 0){return G1=>match(E1,G1);}const H1=F1.match(E1);return H1===null?[]:H1;}function merge(I1,J1){if(J1===void 0){return K1=>merge(I1,K1);}return Object.assign({},I1,J1);}function omit(L1,M1){if(M1===void 0){return N1=>omit(L1,N1);}const O1={};for(key in M1){if(!L1.includes(key)){O1[key]=M1[key];}}return O1;}function path(P1,Q1){if(Q1===void 0){return R1=>path(P1,R1);}let S1=Q1,T1=0;while(T1<P1.length){if(S1===null){return void 0;}S1=S1[P1[T1]];T1++;}return S1;}function pick(U1,V1){if(V1===void 0){return W1=>pick(U1,W1);}const X1={};let Y1=0;while(Y1<U1.length){if(U1[Y1]in V1){X1[U1[Y1]]=V1[U1[Y1]];}Y1++;}return X1;}function pluck(Z1,a2){if(a2===void 0){return b2=>pluck(Z1,b2);}const c2=[];map(d2=>{if(!(d2[Z1]===void 0)){c2.push(d2[Z1]);}},a2);return c2;}function prepend(e2,f2){if(f2===void 0){return g2=>prepend(e2,g2);}const h2=f2;h2.unshift(e2);return h2;}function prop(i2,j2){if(j2===void 0){return k2=>prop(i2,k2);}return j2[i2];}function propEq(l2,m2,n2){if(m2===void 0){return(o2,p2)=>propEq(l2,o2,p2);}else if(n2===void 0){return q2=>propEq(l2,m2,q2);}return n2[l2]===m2;}function range(r2,s2){const t2=[];for(let i=r2;i<s2;i++){t2.push(i);}return t2;}function repeat(a,u2){if(u2===void 0){return v2=>repeat(a,v2);}const w2=Array(u2);return w2.fill(a);}function replace(x2,y2,z2){if(y2===void 0){return(A2,B2)=>replace(x2,A2,B2);}else if(z2===void 0){return C2=>replace(x2,y2,C2);}return z2.replace(x2,y2);}function subtract(a,b){if(b===void 0){return D2=>subtract(a,D2);}return a-b;}function sort(fn,F2){if(F2===void 0){return G2=>sort(fn,G2);}const H2=Array.from(F2);return H2.sort(fn);}function sortBy(fn,J2){if(J2===void 0){return K2=>sortBy(fn,K2);}const L2=Array.from(J2);return L2.sort((a,b)=>{const M2=fn(a),N2=fn(b);return M2<N2?-1:M2>N2?1:0;});}function split(O2,P2){if(P2===void 0){return Q2=>split(O2,Q2);}return P2.split(O2);}function splitEvery(R2,a){if(a===void 0){return S2=>splitEvery(R2,S2);}R2=R2>1?R2:1;const T2=[];let U2=0;while(U2<a.length){T2.push(a.slice(U2,U2+=R2));}return T2;}function tail(V2){return drop(1,V2);}function take(W2,a){if(a===void 0){return X2=>take(W2,X2);}else if(typeof a==="string"){return a.slice(0,W2);}return baseSlice(a,0,W2);}function takeLast(Y2,a){if(a===void 0){return Z2=>takeLast(Y2,Z2);}const a3=a.length;Y2=Y2>a3?a3:Y2;if(typeof a==="string"){return a.slice(a3-Y2);}Y2=a3-Y2;return baseSlice(a,Y2,a3);}function toLower(b3){return b3.toLowerCase();}function toUpper(c3){return c3.toUpperCase();}function test(d3,e3){if(e3===void 0){return f3=>test(d3,f3);}return e3.search(d3)===-1?!1:!0;}function trim(g3){return g3.trim();}function type(a){if(a===null){return"Null";}else if(Array.isArray(a)){return"Array";}else if(typeof a==="boolean"){return"Boolean";}else if(typeof a==="number"){return"Number";}else if(typeof a==="string"){return"String";}else if(a===void 0){return"Undefined";}else if(a instanceof RegExp){return"RegExp";}const h3=a.toString();if(h3.startsWith("async")){return"Async";}else if(h3.includes("function")||h3.includes("=>")){return"Function";}return"Object";}function values(i3){const j3=[];for(key in i3){j3.push(i3[key]);}return j3;}function uniq(k3){let l3=-1;const m3=[];while(++l3<k3.length){const n3=k3[l3];if(!contains(n3,m3)){m3.push(n3);}}return m3;}function update(o3,p3,q3){if(p3===void 0){return(r3,s3)=>update(o3,r3,s3);}else if(q3===void 0){return t3=>update(o3,p3,t3);}const u3=Array.from(q3);return u3.fill(p3,o3,o3+1);}function defaultTo(v3,w3){if(arguments.length===1){return x3=>defaultTo(v3,x3);}return w3===void 0||!(type(w3)===type(v3))?v3:w3;}function curry(fn,z3={}){return A3=>{if(type(fn)==="Async"){return new Promise((B3,C3)=>{fn(merge(A3,z3)).then(B3).catch(C3);});}return fn(merge(A3,z3));};}exports.add=add;exports.adjust=adjust;exports.any=any;exports.append=append;exports.compose=compose;exports.contains=contains;exports.curry=curry;exports.defaultTo=defaultTo;exports.drop=drop;exports.dropLast=dropLast;exports.equals=equals;exports.filter=filter;exports.find=find;exports.findIndex=findIndex;exports.flatten=flatten;exports.head=head;exports.indexOf=indexOf;exports.init=init;exports.join=join;exports.last=last;exports.length=length;exports.map=map;exports.match=match;exports.merge=merge;exports.omit=omit;exports.path=path;exports.pick=pick;exports.pluck=pluck;exports.prepend=prepend;exports.prop=prop;exports.propEq=propEq;exports.range=range;exports.repeat=repeat;exports.replace=replace;exports.sort=sort;exports.sortBy=sortBy;exports.split=split;exports.splitEvery=splitEvery;exports.subtract=subtract;exports.tail=tail;exports.take=take;exports.takeLast=takeLast;exports.test=test;exports.toLower=toLower;exports.toUpper=toUpper;exports.trim=trim;exports.type=type;exports.uniq=uniq;exports.update=update;exports.values=values;