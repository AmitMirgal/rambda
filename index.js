function add(a,b){if(b===void 0){return c=>add(a,c);}return a+b;}function adjust(d,e,f){if(e===void 0){return(g,h)=>adjust(d,g,h);}else if(f===void 0){return j=>adjust(d,e,j);}return f.map((k,l)=>{if(l===e){return d(f[e]);}return k;});}function any(m,n){if(n===void 0){return o=>any(m,o);}let p=0;while(p<n.length){if(m(n[p])){return!0;}p++;}return!1;}function append(q,r){if(r===void 0){return s=>append(q,s);}const t=Array.from(r);t.push(q);return t;}function isFunction(u){return typeof u==="function";}function compose(){const v=arguments;let w=v.length;while(w--){if(!isFunction(v[w])){throw new TypeError();}}return function(){let x=arguments,y=v.length;while(y--){x=[v[y].apply(this,x)];}return x[0];};}function contains(z,A){if(A===void 0){return B=>contains(z,B);}let C=-1,D=!1;while(++C<A.length&&!D){if(equals(A[C],z)){D=!0;}}return D;}function filter(E,F){if(F===void 0){return G=>filter(E,G);}let H=-1,I=0;const J=F.length,K=[];while(++H<J){const L=F[H];if(E(L)){K[I++]=L;}}return K;}function find(M,N){if(N===void 0){return O=>find(M,O);}return N.find(M);}function findIndex(P,Q){if(Q===void 0){return R=>findIndex(P,R);}const S=Q.length;let T=-1;while(++T<S){if(P(Q[T])){return T;}}return-1;}function flatten(U,V){V=V===void 0?[]:V;for(let i=0;i<U.length;i++){if(Array.isArray(U[i])){flatten(U[i],V);}else{V.push(U[i]);}}return V;}function drop(W,a){if(a===void 0){return X=>drop(W,X);}return a.slice(W);}function dropLast(Y,a){if(a===void 0){return Z=>dropLast(Y,Z);}return a.slice(0,-Y);}function equals(a,b){if(b===void 0){return a1=>equals(a,a1);}else if(a===b){return a!==0||1/a===1/b;}const b1=type(a);if(b1!==type(b)){return!1;}if(b1==="Array"){const c1=Array.from(a),d1=Array.from(b);return c1.sort().toString()===d1.sort().toString();}if(b1==="Object"){const e1=Object.keys(a);if(e1.length===Object.keys(b).length){if(e1.length===0){return!0;}let f1=!0;e1.map(g1=>{if(f1){const h1=type(a[g1]),i1=type(b[g1]);if(h1===i1){if(h1==="Object"){if(Object.keys(a[g1]).length===Object.keys(b[g1]).length){if(Object.keys(a[g1]).length!==0){if(!equals(a[g1],b[g1])){f1=!1;}}}else{f1=!1;}}else if(!equals(a[g1],b[g1])){f1=!1;}}else{f1=!1;}}});return f1;}}return!1;}function has(j1,k1){if(k1===void 0){return l1=>has(j1,l1);}return k1[j1]!==void 0;}function head(a){if(typeof a==="string"){return a[0]||"";}return a[0];}function indexOf(m1,n1){if(n1===void 0){return o1=>indexOf(m1,o1);}let p1=-1;const q1=n1.length;while(++p1<q1){if(n1[p1]===m1){return p1;}}return-1;}function baseSlice(r1,s1,t1){let u1=-1,v1=r1.length;t1=t1>v1?v1:t1;if(t1<0){t1+=v1;}v1=s1>t1?0:t1-s1>>>0;s1>>>=0;const w1=Array(v1);while(++u1<v1){w1[u1]=r1[u1+s1];}return w1;}function init(a){if(typeof a==="string"){return a.slice(0,-1);}return a.length?baseSlice(a,0,-1):[];}function join(x1,y1){if(y1===void 0){return z1=>join(x1,z1);}return y1.join(x1);}function map(fn,B1){if(B1===void 0){return C1=>map(fn,C1);}let D1=-1;const E1=B1.length,F1=Array(E1);while(++D1<E1){F1[D1]=fn(B1[D1]);}return F1;}function last(a){if(typeof a==="string"){return a[a.length-1]||"";}return a[a.length-1];}function length(G1){return G1.length;}function match(H1,I1){if(I1===void 0){return J1=>match(H1,J1);}const K1=I1.match(H1);return K1===null?[]:K1;}function merge(L1,M1){if(M1===void 0){return N1=>merge(L1,N1);}return Object.assign({},L1,M1);}function omit(O1,P1){if(P1===void 0){return Q1=>omit(O1,Q1);}const R1={};for(key in P1){if(!O1.includes(key)){R1[key]=P1[key];}}return R1;}function path(S1,T1){if(T1===void 0){return U1=>path(S1,U1);}let V1=T1,W1=0;while(W1<S1.length){if(V1===null){return void 0;}V1=V1[S1[W1]];W1++;}return V1;}function pick(X1,Y1){if(Y1===void 0){return Z1=>pick(X1,Z1);}const a2={};let b2=0;while(b2<X1.length){if(X1[b2]in Y1){a2[X1[b2]]=Y1[X1[b2]];}b2++;}return a2;}function pluck(c2,d2){if(d2===void 0){return e2=>pluck(c2,e2);}const f2=[];map(g2=>{if(!(g2[c2]===void 0)){f2.push(g2[c2]);}},d2);return f2;}function prepend(h2,i2){if(i2===void 0){return j2=>prepend(h2,j2);}const k2=Array.from(i2);k2.unshift(h2);return k2;}function prop(l2,m2){if(m2===void 0){return n2=>prop(l2,n2);}return m2[l2];}function propEq(o2,p2,q2){if(p2===void 0){return(r2,s2)=>propEq(o2,r2,s2);}else if(q2===void 0){return t2=>propEq(o2,p2,t2);}return q2[o2]===p2;}function range(u2,v2){const w2=[];for(let i=u2;i<v2;i++){w2.push(i);}return w2;}function repeat(a,x2){if(x2===void 0){return y2=>repeat(a,y2);}const z2=Array(x2);return z2.fill(a);}function replace(A2,B2,C2){if(B2===void 0){return(D2,E2)=>replace(A2,D2,E2);}else if(C2===void 0){return F2=>replace(A2,B2,F2);}return C2.replace(A2,B2);}function subtract(a,b){if(b===void 0){return G2=>subtract(a,G2);}return a-b;}function sort(fn,I2){if(I2===void 0){return J2=>sort(fn,J2);}const K2=Array.from(I2);return K2.sort(fn);}function sortBy(fn,M2){if(M2===void 0){return N2=>sortBy(fn,N2);}const O2=Array.from(M2);return O2.sort((a,b)=>{const P2=fn(a),Q2=fn(b);return P2<Q2?-1:P2>Q2?1:0;});}function split(R2,S2){if(S2===void 0){return T2=>split(R2,T2);}return S2.split(R2);}function splitEvery(U2,a){if(a===void 0){return V2=>splitEvery(U2,V2);}U2=U2>1?U2:1;const W2=[];let X2=0;while(X2<a.length){W2.push(a.slice(X2,X2+=U2));}return W2;}function tail(Y2){return drop(1,Y2);}function take(Z2,a){if(a===void 0){return a3=>take(Z2,a3);}else if(typeof a==="string"){return a.slice(0,Z2);}return baseSlice(a,0,Z2);}function takeLast(b3,a){if(a===void 0){return c3=>takeLast(b3,c3);}const d3=a.length;b3=b3>d3?d3:b3;if(typeof a==="string"){return a.slice(d3-b3);}b3=d3-b3;return baseSlice(a,b3,d3);}function toLower(e3){return e3.toLowerCase();}function toUpper(f3){return f3.toUpperCase();}function test(g3,h3){if(h3===void 0){return i3=>test(g3,i3);}return h3.search(g3)===-1?!1:!0;}function trim(j3){return j3.trim();}function type(a){if(a===null){return"Null";}else if(Array.isArray(a)){return"Array";}else if(typeof a==="boolean"){return"Boolean";}else if(typeof a==="number"){return"Number";}else if(typeof a==="string"){return"String";}else if(a===void 0){return"Undefined";}else if(a instanceof RegExp){return"RegExp";}const k3=a.toString();if(k3.startsWith("async")){return"Async";}else if(k3.includes("function")||k3.includes("=>")){return"Function";}return"Object";}function values(l3){const m3=[];for(key in l3){m3.push(l3[key]);}return m3;}function uniq(n3){let o3=-1;const p3=[];while(++o3<n3.length){const q3=n3[o3];if(!contains(q3,p3)){p3.push(q3);}}return p3;}function update(r3,s3,t3){if(s3===void 0){return(u3,v3)=>update(r3,u3,v3);}else if(t3===void 0){return w3=>update(r3,s3,w3);}const x3=Array.from(t3);return x3.fill(s3,r3,r3+1);}function defaultTo(y3,z3){if(arguments.length===1){return A3=>defaultTo(y3,A3);}return z3===void 0||!(type(z3)===type(y3))?y3:z3;}function curry(fn,C3={}){return D3=>{if(type(fn)==="Async"){return new Promise((E3,F3)=>{fn(merge(D3,C3)).then(E3).catch(F3);});}return fn(merge(D3,C3));};}exports.add=add;exports.adjust=adjust;exports.any=any;exports.append=append;exports.compose=compose;exports.contains=contains;exports.curry=curry;exports.defaultTo=defaultTo;exports.drop=drop;exports.dropLast=dropLast;exports.equals=equals;exports.filter=filter;exports.find=find;exports.findIndex=findIndex;exports.flatten=flatten;exports.has=has;exports.head=head;exports.indexOf=indexOf;exports.init=init;exports.join=join;exports.last=last;exports.length=length;exports.map=map;exports.match=match;exports.merge=merge;exports.omit=omit;exports.path=path;exports.pick=pick;exports.pluck=pluck;exports.prepend=prepend;exports.prop=prop;exports.propEq=propEq;exports.range=range;exports.repeat=repeat;exports.replace=replace;exports.sort=sort;exports.sortBy=sortBy;exports.split=split;exports.splitEvery=splitEvery;exports.subtract=subtract;exports.tail=tail;exports.take=take;exports.takeLast=takeLast;exports.test=test;exports.toLower=toLower;exports.toUpper=toUpper;exports.trim=trim;exports.type=type;exports.uniq=uniq;exports.update=update;exports.values=values;