const add=(a,b)=>{if(b===void 0){return c=>add(a,c);}return a+b;},adjust=(d,e,f)=>{if(e===void 0){return(g,h)=>adjust(d,g,h);}else if(f===void 0){return j=>adjust(d,e,j);}return f.map((k,l)=>{if(l===e){return d(f[e]);}return k;});},any=(m,n)=>{if(n===void 0){return o=>any(m,o);}let p=0;while(p<n.length){if(m(n[p])){return!0;}p++;}return!1;},append=(q,r)=>{if(r===void 0){return s=>append(q,s);}const t=r;t.unshift(q);return t;},isFunction=u=>typeof u==="function";function compose(){const v=arguments;let w=v.length;while(w--){if(!isFunction(v[w])){throw new TypeError();}}return function(){let x=arguments,y=v.length;while(y--){x=[v[y].apply(this,x)];}return x[0];};}const contains=(z,A)=>{if(A===void 0){return B=>contains(z,B);}return any(C=>z===C,A);},filter=(D,E)=>{if(E===void 0){return F=>filter(D,F);}let G=-1,H=0;const I=E===null?0:E.length,J=[];while(++G<I){const K=E[G];if(D(K)){J[H++]=K;}}return J;},find=(L,M)=>{if(M===void 0){return N=>find(L,N);}return M.find(L);},findIndex=(O,P)=>{if(P===void 0){return Q=>findIndex(O,Q);}const R=P.length;let S=0;while(++S<R){if(O(P[S])){return S;}}return-1;},flatten=(T,U)=>{U=U===void 0?[]:U;for(let i=0;i<T.length;i++){if(Array.isArray(T[i])){flatten(T[i],U);}else{U.push(T[i]);}}return U;},drop=(V,W)=>{if(W===void 0){return X=>drop(V,X);}const Y=W;return Y.slice(V);},dropLast=(Z,a1)=>{if(a1===void 0){return b1=>dropLast(Z,b1);}const c1=a1;return c1.slice(0,-Z);},equals=(a,b)=>{if(b===void 0){return d1=>equals(a,d1);}else if(a===b){return a!==0||1/a===1/b;}const e1=type(a);if(e1!==type(b)){return!1;}if(e1==="Array"){const f1=a,g1=b;return f1.sort().toString()===g1.sort().toString();}if(e1==="Object"){const h1=Object.keys(a);if(h1.length===Object.keys(b).length){if(h1.length===0){return!0;}let i1=!0;h1.map(j1=>{if(i1){const k1=type(a[j1]),l1=type(b[j1]);if(k1===l1){if(k1==="Object"){if(Object.keys(a[j1]).length===Object.keys(b[j1]).length){if(Object.keys(a[j1]).length!==0){if(!equals(a[j1],b[j1])){i1=!1;}}}else{i1=!1;}}else if(!equals(a[j1],b[j1])){i1=!1;}}else{i1=!1;}}});return i1;}}return!1;},head=a=>{if(typeof a==="string"){return a[0]||"";}return a[0];},indexOf=(m1,n1)=>{if(n1===void 0){return o1=>indexOf(m1,o1);}let p1=-1;const q1=n1.length;while(++p1<q1){if(n1[p1]===m1){return p1;}}return-1;},baseSlice=(r1,s1,t1)=>{let u1=-1,v1=r1.length;if(s1<0){s1=-s1>v1?0:v1+s1;}t1=t1>v1?v1:t1;if(t1<0){t1+=v1;}v1=s1>t1?0:t1-s1>>>0;s1>>>=0;const w1=Array(v1);while(++u1<v1){w1[u1]=r1[u1+s1];}return w1;},init=a=>{if(typeof a==="string"){return a.slice(0,-1);}return a.length?baseSlice(a,0,-1):[];},join=(x1,y1)=>{if(y1===void 0){return z1=>join(x1,z1);}return y1.join(x1);},map=(fn,B1)=>{if(B1===void 0){return C1=>map(fn,C1);}return B1.map(fn);},last=D1=>D1[D1.length-1],length=E1=>E1.length,match=(F1,G1)=>{if(G1===void 0){return H1=>match(F1,H1);}const I1=G1.match(F1);return I1===null?[]:I1;},merge=(J1,K1)=>{if(K1===void 0){return L1=>merge(J1,L1);}return Object.assign({},J1,K1);},omit=(M1,N1)=>{if(N1===void 0){return O1=>omit(M1,O1);}const P1={};for(key in N1){if(!M1.includes(key)){P1[key]=N1[key];}}return P1;},path=(Q1,R1)=>{if(R1===void 0){return S1=>path(Q1,S1);}let T1=R1,U1=0;while(U1<Q1.length){if(T1===null){return void 0;}T1=T1[Q1[U1]];U1++;}return T1;},prepend=(V1,W1)=>{if(W1===void 0){return X1=>prepend(V1,X1);}const Y1=W1;Y1.push(V1);return Y1;},pick=(Z1,a2)=>{if(a2===void 0){return b2=>pick(Z1,b2);}const c2={};for(key in a2){if(Z1.includes(key)){c2[key]=a2[key];}}return c2;},prop=(d2,e2)=>{if(e2===void 0){return f2=>prop(d2,f2);}return e2[d2];},propEq=(g2,h2,i2)=>{if(h2===void 0){return(j2,k2)=>propEq(g2,j2,k2);}else if(i2===void 0){return l2=>propEq(g2,h2,l2);}return i2[g2]===h2;},range=(m2,n2)=>{const o2=[];for(let i=m2;i<n2;i++){o2.push(i);}return o2;},repeat=(a,p2)=>{if(p2===void 0){return q2=>repeat(a,q2);}const r2=range(0,p2);return r2.fill(a);},replace=(s2,t2,u2)=>{if(t2===void 0){return(v2,w2)=>replace(s2,v2,w2);}else if(u2===void 0){return x2=>replace(s2,t2,x2);}return u2.replace(s2,t2);},subtract=(a,b)=>{if(b===void 0){return c=>subtract(a,c);}return a-b;},sort=(fn,z2)=>{if(z2===void 0){return A2=>sort(fn,A2);}const B2=z2;return B2.sort(fn);},sortBy=(fn,D2)=>{if(D2===void 0){return E2=>sortBy(fn,E2);}const F2=D2;return F2.sort((a,b)=>{const G2=fn(a),H2=fn(b);return G2<H2?-1:G2>H2?1:0;});},split=(I2,J2)=>{if(J2===void 0){return K2=>split(I2,K2);}return J2.split(I2);},splitEvery=(L2,a)=>{if(a===void 0){return M2=>splitEvery(L2,M2);}L2=L2>1?L2:1;const N2=[];let O2=0;while(O2<a.length){N2.push(a.slice(O2,O2+=L2));}return N2;},tail=P2=>drop(1,P2),take=(Q2,R2)=>{if(R2===void 0){return S2=>take(Q2,S2);}const T2=R2;return T2.slice(0,Q2);},takeLast=(U2,V2)=>{if(V2===void 0){return W2=>dropLast(U2,W2);}const X2=V2;U2=U2>X2.length?X2.length:U2;return X2.slice(X2.length-U2);},toLower=a=>a.toLowerCase(),toUpper=a=>a.toUpperCase(),test=(Y2,Z2)=>{if(Z2===void 0){return a3=>test(Y2,a3);}return Z2.search(Y2)===-1?!1:!0;},trim=b3=>b3.trim(),type=a=>{if(a===null){return"Null";}else if(Array.isArray(a)){return"Array";}else if(typeof a==="boolean"){return"Boolean";}else if(typeof a==="number"){return"Number";}else if(typeof a==="string"){return"String";}else if(a===void 0){return"Undefined";}else if(a instanceof RegExp){return"RegExp";}return"Object";},values=c3=>{const d3=[];for(key in c3){d3.push(c3[key]);}return d3;},uniq=e3=>{const f3=[];return e3.filter(g3=>{if(f3.includes(g3)){return!1;}f3.push(g3);return!0;});},update=(h3,i3,j3)=>{if(i3===void 0){return(k3,l3)=>update(h3,k3,l3);}else if(j3===void 0){return m3=>update(h3,i3,m3);}return j3.fill(h3,i3,i3+1);};module.exports.add=add;module.exports.adjust=adjust;module.exports.any=any;module.exports.append=append;module.exports.compose=compose;module.exports.contains=contains;module.exports.drop=drop;module.exports.dropLast=dropLast;module.exports.equals=equals;module.exports.filter=filter;module.exports.find=find;module.exports.findIndex=findIndex;module.exports.flatten=flatten;module.exports.head=head;module.exports.indexOf=indexOf;module.exports.init=init;module.exports.join=join;module.exports.last=last;module.exports.length=length;module.exports.map=map;module.exports.match=match;module.exports.merge=merge;module.exports.omit=omit;module.exports.path=path;module.exports.pick=pick;module.exports.prepend=prepend;module.exports.prop=prop;module.exports.propEq=propEq;module.exports.range=range;module.exports.repeat=repeat;module.exports.replace=replace;module.exports.sort=sort;module.exports.sortBy=sortBy;module.exports.split=split;module.exports.splitEvery=splitEvery;module.exports.subtract=subtract;module.exports.tail=tail;module.exports.take=take;module.exports.takeLast=takeLast;module.exports.test=test;module.exports.toLower=toLower;module.exports.toUpper=toUpper;module.exports.trim=trim;module.exports.type=type;module.exports.uniq=uniq;module.exports.update=update;module.exports.values=values;