const add=(a,b)=>{if(b===void 0){return c=>add(a,c);}return a+b;},adjust=(d,e,f)=>{if(e===void 0){return(g,h)=>adjust(d,g,h);}else if(f===void 0){return j=>adjust(d,e,j);}return f.map((k,l)=>{if(l===e){return d(f[e]);}return k;});},any=(m,n)=>{if(n===void 0){return o=>any(m,o);}let p=0;while(p<n.length){if(m(n[p])){return!0;}p++;}return!1;},append=(q,r)=>{if(r===void 0){return s=>append(q,s);}const t=r;t.unshift(q);return t;},isFunction=u=>typeof u==="function";function compose(){const v=arguments;let w=v.length;while(w--){if(!isFunction(v[w])){throw new TypeError();}}return function(){let x=arguments,y=v.length;while(y--){x=[v[y].apply(this,x)];}return x[0];};}const contains=(z,A)=>{if(A===void 0){return B=>contains(z,B);}return any(C=>z===C,A);},filter=(D,E)=>{if(E===void 0){return F=>filter(D,F);}let G=-1,H=0;const I=E===null?0:E.length,J=[];while(++G<I){const K=E[G];if(D(K)){J[H++]=K;}}return J;},find=(L,M)=>{if(M===void 0){return N=>find(L,N);}return M.find(L);},findIndex=(O,P)=>{if(P===void 0){return Q=>findIndex(O,Q);}const R=P.length;let S=0;while(++S<R){if(O(P[S])){return S;}}return-1;},flatten=(T,U)=>{U=U===void 0?[]:U;for(let i=0;i<T.length;i++){if(Array.isArray(T[i])){flatten(T[i],U);}else{U.push(T[i]);}}return U;},drop=(V,W)=>{if(W===void 0){return X=>drop(V,X);}const Y=W;return Y.slice(V);},dropLast=(Z,a1)=>{if(a1===void 0){return b1=>dropLast(Z,b1);}const c1=a1;return c1.slice(0,-Z);},equals=(a,b)=>{if(b===void 0){return d1=>equals(a,d1);}else if(a===b){return a!==0||1/a===1/b;}const e1=type(a);if(e1!==type(b)){return!1;}if(e1==="Array"){const f1=a,g1=b;return f1.sort().toString()===g1.sort().toString();}if(e1==="Object"){const h1=Object.keys(a);if(h1.length===Object.keys(b).length){if(h1.length===0){return!0;}let i1=!0;h1.map(j1=>{if(i1){const k1=type(a[j1]),l1=type(b[j1]);if(k1===l1){if(k1==="Object"){if(Object.keys(a[j1]).length===Object.keys(b[j1]).length){if(Object.keys(a[j1]).length!==0){if(!equals(a[j1],b[j1])){i1=!1;}}}else{i1=!1;}}else if(!equals(a[j1],b[j1])){i1=!1;}}else{i1=!1;}}});return i1;}}return!1;},head=a=>{if(typeof a==="string"){return a[0]||"";}return a[0];},indexOf=(m1,n1)=>{let o1=-1;const p1=n1.length;while(++o1<p1){if(n1[o1]===m1){return o1;}}return-1;},init=q1=>dropLast(1,q1),join=(r1,s1)=>{if(s1===void 0){return t1=>join(r1,t1);}return s1.join(r1);},map=(fn,v1)=>{if(v1===void 0){return w1=>map(fn,w1);}return v1.map(fn);},last=x1=>x1[x1.length-1],length=y1=>y1.length,match=(z1,A1)=>{if(A1===void 0){return B1=>match(z1,B1);}const C1=A1.match(z1);return C1===null?[]:C1;},merge=(D1,E1)=>{if(E1===void 0){return F1=>merge(D1,F1);}return Object.assign({},D1,E1);},omit=(G1,H1)=>{if(H1===void 0){return I1=>omit(G1,I1);}const J1={};for(key in H1){if(!G1.includes(key)){J1[key]=H1[key];}}return J1;},path=(K1,L1)=>{if(L1===void 0){return M1=>path(K1,M1);}let N1=L1,O1=0;while(O1<K1.length){if(N1===null){return void 0;}N1=N1[K1[O1]];O1++;}return N1;},prepend=(P1,Q1)=>{if(Q1===void 0){return R1=>prepend(P1,R1);}const S1=Q1;S1.push(P1);return S1;},pick=(T1,U1)=>{if(U1===void 0){return V1=>pick(T1,V1);}const W1={};for(key in U1){if(T1.includes(key)){W1[key]=U1[key];}}return W1;},prop=(X1,Y1)=>{if(Y1===void 0){return Z1=>prop(X1,Z1);}return Y1[X1];},propEq=(a2,b2,c2)=>{if(b2===void 0){return(d2,e2)=>propEq(a2,d2,e2);}else if(c2===void 0){return f2=>propEq(a2,b2,f2);}return c2[a2]===b2;},range=(g2,h2)=>{const i2=[];for(let i=g2;i<h2;i++){i2.push(i);}return i2;},repeat=(a,j2)=>{if(j2===void 0){return k2=>repeat(a,k2);}const l2=range(0,j2);return l2.fill(a);},replace=(m2,n2,o2)=>{if(n2===void 0){return(p2,q2)=>replace(m2,p2,q2);}else if(o2===void 0){return r2=>replace(m2,n2,r2);}return o2.replace(m2,n2);},subtract=(a,b)=>{if(b===void 0){return c=>subtract(a,c);}return a-b;},sort=(fn,t2)=>{if(t2===void 0){return u2=>sort(fn,u2);}const v2=t2;return v2.sort(fn);},sortBy=(fn,x2)=>{if(x2===void 0){return y2=>sortBy(fn,y2);}const z2=x2;return z2.sort((a,b)=>{const A2=fn(a),B2=fn(b);return A2<B2?-1:A2>B2?1:0;});},split=(C2,D2)=>{if(D2===void 0){return E2=>split(C2,E2);}return D2.split(C2);},splitEvery=(F2,a)=>{if(a===void 0){return G2=>splitEvery(F2,G2);}F2=F2>1?F2:1;const H2=[];let I2=0;while(I2<a.length){H2.push(a.slice(I2,I2+=F2));}return H2;},tail=J2=>drop(1,J2),take=(K2,L2)=>{if(L2===void 0){return M2=>take(K2,M2);}const N2=L2;return N2.slice(0,K2);},takeLast=(O2,P2)=>{if(P2===void 0){return Q2=>dropLast(O2,Q2);}const R2=P2;O2=O2>R2.length?R2.length:O2;return R2.slice(R2.length-O2);},toLower=a=>a.toLowerCase(),toUpper=a=>a.toUpperCase(),test=(S2,T2)=>{if(T2===void 0){return U2=>test(S2,U2);}return T2.search(S2)===-1?!1:!0;},trim=V2=>V2.trim(),type=a=>{if(a===null){return"Null";}else if(Array.isArray(a)){return"Array";}else if(typeof a==="boolean"){return"Boolean";}else if(typeof a==="number"){return"Number";}else if(typeof a==="string"){return"String";}else if(a===void 0){return"Undefined";}else if(a instanceof RegExp){return"RegExp";}return"Object";},values=W2=>{const X2=[];for(key in W2){X2.push(W2[key]);}return X2;},uniq=Y2=>{const Z2=[];return Y2.filter(a3=>{if(Z2.includes(a3)){return!1;}Z2.push(a3);return!0;});},update=(b3,c3,d3)=>{if(c3===void 0){return(e3,f3)=>update(b3,e3,f3);}else if(d3===void 0){return g3=>update(b3,c3,g3);}return d3.fill(b3,c3,c3+1);};module.exports.add=add;module.exports.adjust=adjust;module.exports.any=any;module.exports.append=append;module.exports.compose=compose;module.exports.contains=contains;module.exports.drop=drop;module.exports.dropLast=dropLast;module.exports.equals=equals;module.exports.filter=filter;module.exports.find=find;module.exports.findIndex=findIndex;module.exports.flatten=flatten;module.exports.head=head;module.exports.indexOf=indexOf;module.exports.init=init;module.exports.join=join;module.exports.last=last;module.exports.length=length;module.exports.map=map;module.exports.match=match;module.exports.merge=merge;module.exports.omit=omit;module.exports.path=path;module.exports.pick=pick;module.exports.prepend=prepend;module.exports.prop=prop;module.exports.propEq=propEq;module.exports.range=range;module.exports.repeat=repeat;module.exports.replace=replace;module.exports.sort=sort;module.exports.sortBy=sortBy;module.exports.split=split;module.exports.splitEvery=splitEvery;module.exports.subtract=subtract;module.exports.tail=tail;module.exports.take=take;module.exports.takeLast=takeLast;module.exports.test=test;module.exports.toLower=toLower;module.exports.toUpper=toUpper;module.exports.trim=trim;module.exports.type=type;module.exports.uniq=uniq;module.exports.update=update;module.exports.values=values;