const add=(a,b)=>{if(b===void 0){return c=>add(a,c);}return a+b;},adjust=(d,e,f)=>{if(e===void 0){return(g,h)=>adjust(d,g,h);}else if(f===void 0){return j=>adjust(d,e,j);}return f.map((k,l)=>{if(l===e){return d(f[e]);}return k;});},any=(m,n)=>{if(n===void 0){return o=>any(m,o);}let p=0;while(p<n.length){if(m(n[p])){return!0;}p++;}return!1;},append=(q,r)=>{if(r===void 0){return s=>append(q,s);}const t=r;t.unshift(q);return t;},isFunction=u=>typeof u==="function";function compose(){const v=arguments;let w=v.length;while(w--){if(!isFunction(v[w])){throw new TypeError();}}return function(){let x=arguments,y=v.length;while(y--){x=[v[y].apply(this,x)];}return x[0];};}const contains=(z,A)=>{if(A===void 0){return B=>contains(z,B);}return A.includes(z);},filter=(C,D)=>{if(D===void 0){return E=>filter(C,E);}let F=-1,G=0;const H=D===null?0:D.length,I=[];while(++F<H){const J=D[F];if(C(J)){I[G++]=J;}}return I;},find=(K,L)=>{if(L===void 0){return M=>find(K,M);}return L.find(K);},findIndex=(N,O)=>{if(O===void 0){return P=>findIndex(N,P);}const Q=O.length;let R=0;while(++R<Q){if(N(O[R])){return R;}}return-1;},flatten=(S,T)=>{T=T===void 0?[]:T;for(let i=0;i<S.length;i++){if(Array.isArray(S[i])){flatten(S[i],T);}else{T.push(S[i]);}}return T;},drop=(U,V)=>{if(V===void 0){return W=>drop(U,W);}const X=V;return X.slice(U);},dropLast=(Y,Z)=>{if(Z===void 0){return a1=>dropLast(Y,a1);}const b1=Z;return b1.slice(0,-Y);},equals=(a,b)=>{if(b===void 0){return c1=>equals(a,c1);}else if(a===b){return a!==0||1/a===1/b;}const d1=type(a);if(d1!==type(b)){return!1;}if(d1==="Array"){const e1=a,f1=b;return e1.sort().toString()===f1.sort().toString();}if(d1==="Object"){const g1=Object.keys(a);if(g1.length===Object.keys(b).length){if(g1.length===0){return!0;}let h1=!0;g1.map(i1=>{if(h1){const j1=type(a[i1]),k1=type(b[i1]);if(j1===k1){if(j1==="Object"){if(Object.keys(a[i1]).length===Object.keys(b[i1]).length){if(Object.keys(a[i1]).length!==0){if(!equals(a[i1],b[i1])){h1=!1;}}}else{h1=!1;}}else if(!equals(a[i1],b[i1])){h1=!1;}}else{h1=!1;}}});return h1;}}return!1;},head=a=>{if(typeof a==="string"){return a[0]||"";}return a[0];},indexOf=(l1,m1)=>{if(m1===void 0){return n1=>indexOf(l1,n1);}let o1=-1;const p1=m1.length;while(++o1<p1){if(m1[o1]===l1){return o1;}}return-1;},baseSlice=(q1,r1,s1)=>{let t1=-1,u1=q1.length;if(r1<0){r1=-r1>u1?0:u1+r1;}s1=s1>u1?u1:s1;if(s1<0){s1+=u1;}u1=r1>s1?0:s1-r1>>>0;r1>>>=0;const v1=Array(u1);while(++t1<u1){v1[t1]=q1[t1+r1];}return v1;},init=a=>{if(typeof a==="string"){return a.slice(0,-1);}return a.length?baseSlice(a,0,-1):[];},join=(w1,x1)=>{if(x1===void 0){return y1=>join(w1,y1);}return x1.join(w1);},map=(fn,A1)=>{if(A1===void 0){return B1=>map(fn,B1);}let C1=-1;const D1=A1.length,E1=Array(D1);while(++C1<D1){E1[C1]=fn(A1[C1]);}return E1;},last=F1=>F1[F1.length-1],length=G1=>G1.length,match=(H1,I1)=>{if(I1===void 0){return J1=>match(H1,J1);}const K1=I1.match(H1);return K1===null?[]:K1;},merge=(L1,M1)=>{if(M1===void 0){return N1=>merge(L1,N1);}return Object.assign({},L1,M1);},omit=(O1,P1)=>{if(P1===void 0){return Q1=>omit(O1,Q1);}const R1={};for(key in P1){if(!O1.includes(key)){R1[key]=P1[key];}}return R1;},path=(S1,T1)=>{if(T1===void 0){return U1=>path(S1,U1);}let V1=T1,W1=0;while(W1<S1.length){if(V1===null){return void 0;}V1=V1[S1[W1]];W1++;}return V1;},prepend=(X1,Y1)=>{if(Y1===void 0){return Z1=>prepend(X1,Z1);}const a2=Y1;a2.push(X1);return a2;},pick=(b2,c2)=>{if(c2===void 0){return d2=>pick(b2,d2);}const e2={};let f2=0;while(f2<b2.length){if(b2[f2]in c2){e2[b2[f2]]=c2[b2[f2]];}f2++;}return e2;},prop=(g2,h2)=>{if(h2===void 0){return i2=>prop(g2,i2);}return h2[g2];},propEq=(j2,k2,l2)=>{if(k2===void 0){return(m2,n2)=>propEq(j2,m2,n2);}else if(l2===void 0){return o2=>propEq(j2,k2,o2);}return l2[j2]===k2;},range=(p2,q2)=>{const r2=[];for(let i=p2;i<q2;i++){r2.push(i);}return r2;},repeat=(a,s2)=>{if(s2===void 0){return t2=>repeat(a,t2);}const u2=Array(s2);return u2.fill(a);},replace=(v2,w2,x2)=>{if(w2===void 0){return(y2,z2)=>replace(v2,y2,z2);}else if(x2===void 0){return A2=>replace(v2,w2,A2);}return x2.replace(v2,w2);},subtract=(a,b)=>{if(b===void 0){return c=>subtract(a,c);}return a-b;},sort=(fn,C2)=>{if(C2===void 0){return D2=>sort(fn,D2);}const E2=C2;return E2.sort(fn);},sortBy=(fn,G2)=>{if(G2===void 0){return H2=>sortBy(fn,H2);}const I2=G2;return I2.sort((a,b)=>{const J2=fn(a),K2=fn(b);return J2<K2?-1:J2>K2?1:0;});},split=(L2,M2)=>{if(M2===void 0){return N2=>split(L2,N2);}return M2.split(L2);},splitEvery=(O2,a)=>{if(a===void 0){return P2=>splitEvery(O2,P2);}O2=O2>1?O2:1;const Q2=[];let R2=0;while(R2<a.length){Q2.push(a.slice(R2,R2+=O2));}return Q2;},tail=S2=>drop(1,S2),take=(T2,a)=>{if(a===void 0){return U2=>take(T2,U2);}else if(typeof a==="string"){return a.slice(0,T2);}return baseSlice(a,0,T2);},takeLast=(V2,a)=>{if(a===void 0){return W2=>dropLast(V2,W2);}V2=V2>a.length?a.length:V2;if(typeof a==="string"){return a.slice(a.length-V2);}return baseSlice(a,a.length-V2,a.length);},toLower=a=>a.toLowerCase(),toUpper=a=>a.toUpperCase(),test=(X2,Y2)=>{if(Y2===void 0){return Z2=>test(X2,Z2);}return Y2.search(X2)===-1?!1:!0;},trim=a3=>a3.trim(),type=a=>{if(a===null){return"Null";}else if(Array.isArray(a)){return"Array";}else if(typeof a==="boolean"){return"Boolean";}else if(typeof a==="number"){return"Number";}else if(typeof a==="string"){return"String";}else if(a===void 0){return"Undefined";}else if(a instanceof RegExp){return"RegExp";}return"Object";},values=b3=>{const c3=[];for(key in b3){c3.push(b3[key]);}return c3;},uniq=d3=>{let e3=-1;const f3=[];while(++e3<d3.length){const g3=d3[e3];if(!f3.includes(g3)){f3.push(g3);}}return f3;},update=(h3,i3,j3)=>{if(i3===void 0){return(k3,l3)=>update(h3,k3,l3);}else if(j3===void 0){return m3=>update(h3,i3,m3);}return j3.fill(h3,i3,i3+1);};module.exports.add=add;module.exports.adjust=adjust;module.exports.any=any;module.exports.append=append;module.exports.compose=compose;module.exports.contains=contains;module.exports.drop=drop;module.exports.dropLast=dropLast;module.exports.equals=equals;module.exports.filter=filter;module.exports.find=find;module.exports.findIndex=findIndex;module.exports.flatten=flatten;module.exports.head=head;module.exports.indexOf=indexOf;module.exports.init=init;module.exports.join=join;module.exports.last=last;module.exports.length=length;module.exports.map=map;module.exports.match=match;module.exports.merge=merge;module.exports.omit=omit;module.exports.path=path;module.exports.pick=pick;module.exports.prepend=prepend;module.exports.prop=prop;module.exports.propEq=propEq;module.exports.range=range;module.exports.repeat=repeat;module.exports.replace=replace;module.exports.sort=sort;module.exports.sortBy=sortBy;module.exports.split=split;module.exports.splitEvery=splitEvery;module.exports.subtract=subtract;module.exports.tail=tail;module.exports.take=take;module.exports.takeLast=takeLast;module.exports.test=test;module.exports.toLower=toLower;module.exports.toUpper=toUpper;module.exports.trim=trim;module.exports.type=type;module.exports.uniq=uniq;module.exports.update=update;module.exports.values=values;